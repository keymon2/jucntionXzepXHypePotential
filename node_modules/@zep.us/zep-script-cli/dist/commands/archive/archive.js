"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const archiver_1 = __importDefault(require("archiver"));
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const ora_1 = __importDefault(require("ora"));
const path_1 = __importDefault(require("path"));
const logger_1 = __importDefault(require("../../tools/logger"));
function checkMainFile(root) {
    let mainFilePath = path_1.default.join(root, "main.ts");
    if (fs_extra_1.default.existsSync(mainFilePath)) {
        const distDirPath = path_1.default.join(root, "dist/");
        if (fs_extra_1.default.existsSync(distDirPath)) {
            return "typescript";
        }
        else {
            throw new Error("TypeScript project doesn't seem to be built. Please run `zep-script build` first.");
        }
    }
    mainFilePath = path_1.default.join(root, "main.js");
    if (fs_extra_1.default.existsSync(mainFilePath)) {
        return "javascript";
    }
    throw new Error("No main file found.");
}
exports.default = (async function archive([], options) {
    const cwd = process.cwd();
    const root = options.projectRoot || cwd;
    const loader = (0, ora_1.default)();
    try {
        // const configJsonPath = path.join(root, "zep-script.json");
        // const configJsonObject = JSON.parse(
        //   fs.readFileSync(configJsonPath).toString()
        // );
        loader.start("Analyzing project");
        const projectName = path_1.default.basename(root);
        const projectLanguage = checkMainFile(root);
        loader.succeed();
        loader.start("Archiving project");
        const archiveOutputPath = path_1.default.join(cwd, `${projectName}.zepapp.zip`);
        const output = fs_extra_1.default.createWriteStream(archiveOutputPath);
        const archive = (0, archiver_1.default)("zip");
        archive.pipe(output);
        if (projectLanguage === "typescript") {
            const distDirPath = path_1.default.join(root, "dist/");
            archive.directory(distDirPath, false);
        }
        else {
            archive.glob("**/*.js", { cwd: root });
        }
        const resDirPath = path_1.default.join(root, "res/");
        archive.directory(resDirPath, false);
        archive.finalize();
        output.on("close", function () {
            loader.succeed();
            logger_1.default.log(chalk_1.default.green(`Project ${projectName} archived successfully.`));
        });
    }
    catch (e) {
        loader.fail();
        if (e instanceof Error) {
            logger_1.default.error(e.message);
        }
    }
});
