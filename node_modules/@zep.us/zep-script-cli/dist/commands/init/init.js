"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const clear_1 = __importDefault(require("clear"));
const execa_1 = __importDefault(require("execa"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const ora_1 = __importDefault(require("ora"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const banner_1 = __importDefault(require("../../tools/banner"));
const logger_1 = __importDefault(require("../../tools/logger"));
async function createProjectDirectory(directory) {
    logger_1.default.debug(`Creating project directory`);
    if (fs_extra_1.default.existsSync(directory)) {
        throw new Error(`Cannot initialize new project because directory "${directory}" already exists.`);
    }
    try {
        fs_extra_1.default.mkdirSync(directory, { recursive: true });
    }
    catch (error) {
        throw new Error("Error occurred while trying to create project directory.");
    }
    return directory;
}
async function installTemplate({ npm, root, name, }) {
    logger_1.default.debug(`Installing template to ${root}`);
    const packageManager = npm ? "npm" : "yarn";
    await (0, execa_1.default)(packageManager, ["init", "--yes"], {
        stdio: !logger_1.default.isVerbose() ? "pipe" : "inherit",
        cwd: root,
    });
    await (0, execa_1.default)(packageManager, ["add", name], {
        stdio: !logger_1.default.isVerbose() ? "pipe" : "inherit",
        cwd: root,
    });
}
async function copyTemplate(templatePath, projectRoot) {
    logger_1.default.debug(`Copying template from ${templatePath}`);
    await fs_extra_1.default.copy(templatePath, projectRoot, {
        filter: (path) => !path.includes("zep-script-template/node_modules") &&
            !path.includes("zep-script-template/dist"),
    });
}
async function renameProjectName(projectRoot, projectName) {
    logger_1.default.debug(`Renaming project in ${projectRoot} to ${projectName}`);
    const packageJson = path_1.default.join(projectRoot, "package.json");
    const packageJsonObject = JSON.parse(fs_extra_1.default.readFileSync(packageJson).toString());
    packageJsonObject.name = projectName;
    delete packageJsonObject.publishConfig;
    delete packageJsonObject.files;
    delete packageJsonObject.gitHead;
    fs_extra_1.default.writeFileSync(packageJson, JSON.stringify(packageJsonObject, null, 2));
}
async function installDependencies({ npm, root, }) {
    logger_1.default.debug(`Installing dependencies in ${root}`);
    const packageManager = npm ? "npm" : "yarn";
    await (0, execa_1.default)(packageManager, ["install"], {
        stdio: !logger_1.default.isVerbose() ? "pipe" : "inherit",
        cwd: root,
    });
}
async function createFromTemplate({ projectName, npm, directory, skipInstall, }) {
    logger_1.default.debug("Initializing new project");
    logger_1.default.log(banner_1.default);
    const loader = (0, ora_1.default)();
    const projectDir = await createProjectDirectory(directory);
    const templateSourceDir = fs_extra_1.default.mkdtempSync(path_1.default.join(os_1.default.tmpdir(), "zep-script-cli-init"));
    try {
        loader.start("Downloading template");
        const templateName = "@zep.us/zep-script-template";
        await installTemplate({ npm, root: templateSourceDir, name: templateName });
        loader.succeed();
        loader.start("Copying template");
        const templatePath = path_1.default.resolve(templateSourceDir, "node_modules", templateName);
        await copyTemplate(templatePath, projectDir);
        loader.succeed();
        loader.start("Processing template");
        await renameProjectName(projectDir, projectName);
        loader.succeed();
        if (!skipInstall) {
            loader.start("Installing dependencies");
            await installDependencies({ npm, root: projectDir });
            loader.succeed();
        }
        else {
            loader.succeed("Dependencies installation skipped");
        }
        logger_1.default.log(chalk_1.default.green(`Project ${projectName} initialized successfully.`));
    }
    catch (e) {
        loader.fail();
        throw e;
    }
    finally {
        fs_extra_1.default.removeSync(templateSourceDir);
    }
}
function validateProjectName(name) {
    const NAME_REGEX = /^[$A-Z_][0-9A-Z_$]*$/i;
    const reservedNames = ["zep-script"];
    if (!String(name).match(NAME_REGEX)) {
        throw new Error(`"${name}" is not a valid name for a project. Please use a valid identifier name (alphanumeric).`);
    }
    const lowerCaseName = name.toLowerCase();
    if (reservedNames.includes(lowerCaseName)) {
        throw new Error(`Not a valid name for a project. Please do not use the reserved word "${lowerCaseName}".`);
    }
}
exports.default = (async function initialize([projectName], options) {
    (0, clear_1.default)();
    const root = process.cwd();
    validateProjectName(projectName);
    const directory = path_1.default.relative(root, options.directory || projectName);
    try {
        await createFromTemplate({
            projectName,
            directory,
            npm: options.npm,
            skipInstall: options.skipInstall,
        });
    }
    catch (e) {
        if (e instanceof Error) {
            logger_1.default.error(e.message);
        }
    }
});
